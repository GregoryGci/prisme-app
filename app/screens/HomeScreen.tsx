import React, { useEffect, useState, useMemo } from "react";
import {
  SafeAreaView,
  StyleSheet,
  FlatList,
  View,
  TouchableOpacity,
  Alert,
  Modal,
  TextInput,
  Platform,
  RefreshControl,
} from "react-native";
import GlassCard from "../components/GlassCard";
import AppText from "../components/AppText";
import { usePrompt } from "../context/PromptContext";
import { Trash, Plus, List } from "phosphor-react-native";
import AddScheduledPromptScreen from "./AddScheduledPromptScreen";
import { useNavigation, DrawerActions } from "@react-navigation/native";

/**
 * üè† √âcran principal de l'application Prism
 *
 * Fonctionnalit√©s principales :
 * - Affichage du feed des prompts ex√©cut√©s (r√©ponses re√ßues)
 * - Barre de recherche pour soumettre des prompts instantan√©s
 * - Acc√®s au drawer de navigation
 * - Modal pour planifier des prompts r√©currents
 * - Rafra√Æchissement manuel du feed (pull-to-refresh)
 * - V√©rification automatique des prompts planifi√©s toutes les minutes
 */
export default function HomeScreen() {
  // Navigation pour contr√¥ler le drawer et les transitions
  const navigation = useNavigation();

  // Contexte global pour la gestion des prompts
  const { prompts, checkAndRunScheduledPrompts, clearPrompts, addPrompt } =
    usePrompt();

  // √âtats locaux du composant
  const [refreshing, setRefreshing] = useState(false); // Indicateur de rafra√Æchissement
  const [showScheduleModal, setShowScheduleModal] = useState(false); // Contr√¥le de la modal de planification
  const [searchPrompt, setSearchPrompt] = useState(""); // Texte de la barre de recherche

  /**
   * üîÑ V√©rification automatique des prompts planifi√©s
   * Lance une v√©rification toutes les 60 secondes pour ex√©cuter
   * les prompts qui ont atteint leur heure programm√©e
   */
  useEffect(() => {
    const interval = setInterval(() => {
      checkAndRunScheduledPrompts();
    }, 60000); // Intervalle de 60 secondes

    // Nettoyage de l'intervalle lors du d√©montage du composant
    return () => clearInterval(interval);
  }, [checkAndRunScheduledPrompts]);

  /**
   * üîΩ Gestion du rafra√Æchissement manuel (pull-to-refresh)
   * Permet √† l'utilisateur de forcer la v√©rification des prompts planifi√©s
   */
  const handleRefresh = async () => {
    setRefreshing(true);
    await checkAndRunScheduledPrompts();
    setRefreshing(false);
  };

  /**
   * üìù Filtrage et optimisation des prompts pour le feed
   */
  const feedPrompts = useMemo(() => {
    // Filtrer les prompts qui ont une r√©ponse (prompts ex√©cut√©s)
    const promptsWithResponse = prompts.filter((p) => p.response);
    // Inverser l'ordre pour afficher les plus r√©cents en premier
    return promptsWithResponse.slice().reverse();
  }, [prompts]); // D√©pendance : recalcul uniquement si prompts change

  /**
   * üöÄ Soumission d'un prompt instantan√© depuis la barre de recherche
   * Cr√©e et ex√©cute imm√©diatement un prompt (non planifi√©)
   */
  const handleSearchSubmit = async () => {
    if (searchPrompt.trim()) {
      await addPrompt(searchPrompt); // Ex√©cution imm√©diate via le contexte
      setSearchPrompt(""); // R√©initialisation du champ de saisie
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      {/* üéØ Header avec navigation, recherche et actions */}
      <View style={styles.headerRow}>
        {/* Bouton d'ouverture du drawer de navigation */}
        <TouchableOpacity
          accessibilityLabel="Ouvrir le menu de navigation"
          accessibilityRole="button"
          onPress={() => navigation.dispatch(DrawerActions.openDrawer())}
        >
          <List size={26} weight="bold" color="white" />
        </TouchableOpacity>

        {/* Barre de recherche centr√©e et responsive */}
        <View style={styles.searchHeaderBar}>
          <TextInput
            value={searchPrompt}
            onChangeText={setSearchPrompt}
            placeholder="Tape ton prompt ici..."
            placeholderTextColor="#888"
            onSubmitEditing={handleSearchSubmit}
            returnKeyType="send"
            style={styles.searchInput}
            accessibilityLabel="Champ de saisie pour nouveau prompt"
          />
        </View>

        {/* Bouton d'acc√®s √† la planification de prompts */}
        <TouchableOpacity
          accessibilityLabel="Planifier un nouveau prompt"
          accessibilityRole="button"
          onPress={() => setShowScheduleModal(true)}
        >
          <Plus size={26} weight="bold" color="white" />
        </TouchableOpacity>
      </View>

      {/* üìú Feed principal des prompts ex√©cut√©s */}
      <FlatList
        data={feedPrompts} // ‚úÖ Utilisation de la version optimis√©e
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <GlassCard
            title={item.question}
            content={item.response}
            source={item.source}
          />
        )}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={handleRefresh}
            colors={["#fff"]} // Couleur de l'indicateur sur Android
            tintColor="#fff" // Couleur de l'indicateur sur iOS
          />
        }
        showsVerticalScrollIndicator={false} // Interface plus propre
        contentContainerStyle={
          feedPrompts.length === 0 && styles.emptyContainer
        }
      />

      {/* üìÖ Modal de planification des prompts r√©currents */}
      <Modal
        visible={showScheduleModal}
        animationType="slide"
        presentationStyle="pageSheet"
        onRequestClose={() => setShowScheduleModal(false)}
      >
        <AddScheduledPromptScreen />
      </Modal>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  // Conteneur principal avec fond sombre coh√©rent
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: "#1E1E1E",
  },

  // Ligne d'en-t√™te avec disposition horizontale √©quilibr√©e
  headerRow: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingHorizontal: 18,
    marginBottom: 10,
  },

  // Conteneur de la barre de recherche avec effet glassmorphism
  searchHeaderBar: {
    flex: 1, // Prend tout l'espace disponible entre les boutons
    marginHorizontal: 12,
    backgroundColor: "#252525",
    borderRadius: 12,
    paddingHorizontal: 10,
    paddingVertical: Platform.OS === "ios" ? 6 : 4,

    // Effets visuels modernes
    shadowColor: "#fff",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 6,
    elevation: 3, // Ombre sur Android
    borderWidth: 1,
    borderColor: "rgba(255, 255, 255, 0.06)", // Bordure subtile
  },

  // Style du champ de saisie int√©gr√©
  searchInput: {
    fontSize: 16,
    color: "#ffffff",
    // Pas de styles suppl√©mentaires pour garder l'apparence native
  },

  // Style pour le conteneur vide (quand aucun prompt n'est affich√©)
  emptyContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
});
