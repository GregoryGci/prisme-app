import axios from "axios";
import Constants from "expo-constants";

/**
 * üîê R√©cup√©ration s√©curis√©e de la cl√© API Perplexity
 *
 * Ordre de priorit√© pour la r√©cup√©ration :
 * 1. Variable d'environnement depuis app.config.js (recommand√© pour Expo)
 * 2. Variable d'environnement syst√®me (fallback)
 *
 * Cette approche garantit que la cl√© API n'est jamais expos√©e dans le code source
 * et peut √™tre diff√©rente selon l'environnement (d√©veloppement/production).
 */
const PERPLEXITY_API_KEY =
  Constants.expoConfig?.extra?.perplexityApiKey ||
  process.env.PERPLEXITY_API_KEY;

/**
 * ‚úÖ V√©rification de s√©curit√© au d√©marrage de l'application
 *
 * Cette v√©rification permet de d√©tecter imm√©diatement si la configuration
 * des variables d'environnement est incorrecte, √©vitant des erreurs plus tard.
 */
if (!PERPLEXITY_API_KEY) {
  console.error("‚ùå ERREUR CRITIQUE: Cl√© API Perplexity manquante!");
  console.error(
    "üìã V√©rifiez que votre fichier .env contient PERPLEXITY_API_KEY"
  );
}

/**
 * üîó Interface TypeScript pour le r√©sultat enrichi avec sources
 *
 * Cette interface structure la r√©ponse de Perplexity en incluant non seulement
 * le texte de r√©ponse, mais aussi les sources web utilis√©es, format√©es pour
 * diff√©rents usages (affichage utilisateur, stockage, liens cliquables).
 */
export interface PerplexityResult {
  response: string; // R√©ponse textuelle principale de l'IA
  sources: string[]; // Array des URLs sources brutes
  sourcesFormatted: string; // Sources format√©es pour stockage/affichage
  sourcesDisplay: string; // Sources format√©es pour l'utilisateur (noms de domaines)
}

/**
 * üîç Fonction d'extraction des URLs depuis le texte de r√©ponse
 *
 * Cette fonction utilise une expression r√©guli√®re optimis√©e pour d√©tecter
 * et extraire toutes les URLs pr√©sentes dans la r√©ponse de Perplexity.
 * Elle g√®re les URLs modernes avec param√®tres, ports, et ancres.
 *
 * Am√©liorations par rapport aux versions basiques :
 * - Support des ports personnalis√©s (:8080, :3000, etc.)
 * - Gestion des param√®tres d'URL (?param=value&autre=valeur)
 * - Support des ancres (#section)
 * - D√©duplication automatique des URLs identiques
 * - Limitation √† 5 sources maximum pour √©viter l'encombrement
 *
 * @param text - Texte de la r√©ponse contenant potentiellement des URLs
 * @returns Array des URLs uniques trouv√©es (maximum 5)
 */
function extractSources(text: string): string[] {
  /**
   * üìù Explication de la regex utilis√©e :
   *
   * https?:\/\/           - Protocole HTTP ou HTTPS obligatoire
   * (?:[-\w.])+           - Nom de domaine (lettres, chiffres, tirets, points)
   * (?:\:[0-9]+)?         - Port optionnel (:8080, :3000, etc.)
   * (?:\/(?:[\w\/_.])*    - Chemin optionnel apr√®s le domaine
   * (?:\?(?:[\w&=%.])*)?  - Param√®tres d'URL optionnels (?param=value)
   * (?:\#(?:[\w.])*)?)?   - Ancre optionnelle (#section)
   *
   * Le flag 'g' permet de capturer toutes les occurrences dans le texte.
   */
  const urlRegex =
    /https?:\/\/(?:[-\w.])+(?:\:[0-9]+)?(?:\/(?:[\w\/_.])*(?:\?(?:[\w&=%.])*)?(?:\#(?:[\w.])*)?)?/g;

  /**
   * Extraction et d√©duplication des URLs :
   * 1. Array.from() avec matchAll() capture toutes les correspondances
   * 2. map() extrait uniquement l'URL compl√®te (match[0])
   * 3. filter() supprime les doublons en comparant les indices
   * 4. slice(0, 5) limite √† 5 sources maximum
   */
  const sources = Array.from(text.matchAll(urlRegex), (match) => match[0])
    .filter((url, index, array) => array.indexOf(url) === index) // Suppression des doublons
    .slice(0, 5); // Limitation √† 5 sources pour √©viter l'encombrement de l'interface

  return sources;
}

/**
 * üîó Fonction de formatage des sources selon le contexte d'utilisation
 *
 * Cette fonction adapte l'affichage des sources selon leur nombre :
 * - Aucune source : "Perplexity" (source par d√©faut)
 * - Une source : URL compl√®te (permet les liens cliquables)
 * - Plusieurs sources : Toutes les URLs s√©par√©es par des virgules
 *
 * Ce formatage est utilis√© pour le stockage et l'affichage des liens cliquables
 * dans l'interface utilisateur.
 *
 * @param sources - Array des URLs sources extraites
 * @returns String format√©e pour l'affichage ou le stockage
 */
function formatSources(sources: string[]): string {
  // Cas 1 : Aucune source d√©tect√©e
  if (sources.length === 0) return "Perplexity";

  // Cas 2 : Une seule source - retour de l'URL compl√®te pour lien cliquable
  if (sources.length === 1) return sources[0];

  // Cas 3 : Plusieurs sources - toutes les URLs s√©par√©es par des virgules
  return sources.join(", ");
}

/**
 * üè∑Ô∏è Fonction d'extraction du nom de domaine pour affichage utilisateur
 *
 * Cette fonction simplifie les URLs compl√®tes en noms de domaines lisibles
 * pour un affichage plus propre dans l'interface utilisateur.
 *
 * Exemples de transformation :
 * - "https://www.lemonde.fr/article/123" ‚Üí "lemonde.fr"
 * - "https://franceinfo.fr/sport/esport" ‚Üí "franceinfo.fr"
 * - URL malform√©e ‚Üí "URL tronqu√©e..."
 *
 * @param url - URL compl√®te √† traiter
 * @returns Nom de domaine simplifi√© ou URL tronqu√©e en cas d'erreur
 */
function getDomainName(url: string): string {
  try {
    // Utilisation de l'API native URL pour parser l'URL de mani√®re fiable
    const domain = new URL(url).hostname.replace("www.", "");
    return domain;
  } catch {
    /**
     * Fallback s√©curis√© en cas d'URL malform√©e :
     * - Tronque l'URL √† 30 caract√®res maximum
     * - Ajoute "..." pour indiquer la troncature
     * - √âvite les crashs de l'application
     */
    return url.substring(0, 30) + "...";
  }
}

/**
 * ‚è∞ Fonction utilitaire de d√©lai avec Promise
 * @param ms - D√©lai en millisecondes
 */
function delay(ms: number): Promise<void> {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

/**
 * üö¶ Variable globale pour espacer les requ√™tes et √©viter le rate limiting
 */
let lastRequestTime = 0;
const MIN_REQUEST_INTERVAL = 2000; // 2 secondes entre les requ√™tes

/**
 * üîÑ Syst√®me de retry avec backoff exponentiel et gestion sp√©ciale 429
 *
 * Impl√©mente une strat√©gie de retry intelligente avec gestion sp√©ciale des erreurs 429 :
 * - Tentative 1 : imm√©diate (avec d√©lai minimum)
 * - Tentative 2 : apr√®s 2 secondes (standard) ou 10s (si 429)
 * - Tentative 3 : apr√®s 4 secondes (standard) ou 30s (si 429)
 * - Tentative 4 : apr√®s 8 secondes (standard) ou 60s (si 429)
 *
 * @param operation - Fonction async √† ex√©cuter avec retry
 * @param maxRetries - Nombre maximum de tentatives (d√©faut: 3)
 * @param baseDelay - D√©lai de base en ms (d√©faut: 2000)
 */
async function withRetry<T>(
  operation: () => Promise<T>,
  maxRetries: number = 3,
  baseDelay: number = 2000
): Promise<T> {
  let lastError: Error;

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      // ‚úÖ NOUVEAU : Respecter l'intervalle minimum entre requ√™tes
      const timeSinceLastRequest = Date.now() - lastRequestTime;
      if (timeSinceLastRequest < MIN_REQUEST_INTERVAL) {
        const waitTime = MIN_REQUEST_INTERVAL - timeSinceLastRequest;
        console.log(
          `‚è≥ Attente de ${waitTime}ms pour respecter le rate limiting...`
        );
        await delay(waitTime);
      }

      console.log(`üîÑ Tentative ${attempt}/${maxRetries}`);
      lastRequestTime = Date.now(); // ‚úÖ Marquer le timestamp de la requ√™te

      const result = await operation();

      if (attempt > 1) {
        console.log(`‚úÖ Succ√®s apr√®s ${attempt} tentative(s)`);
      }

      return result;
    } catch (error: any) {
      lastError = error;

      // Ne pas retry sur certaines erreurs d√©finitives
      if (error.response?.status === 401 || error.response?.status === 403) {
        console.log(
          `‚ùå Erreur d√©finitive (${error.response.status}), pas de retry`
        );
        throw error;
      }

      if (attempt === maxRetries) {
        console.log(`‚ùå √âchec apr√®s ${maxRetries} tentatives`);
        throw lastError;
      }

      // ‚úÖ NOUVEAU : Calcul du d√©lai sp√©cial pour l'erreur 429
      let delayMs: number;

      if (error.response?.status === 429) {
        // D√©lais beaucoup plus longs pour rate limiting
        const rateLimitDelays = [10000, 30000, 60000]; // 10s, 30s, 60s
        delayMs = rateLimitDelays[attempt - 1] || 60000;
        console.log(
          `üö¶ Rate limit d√©tect√© (429) - Attente sp√©ciale de ${
            delayMs / 1000
          }s...`
        );
      } else {
        // D√©lais normaux pour autres erreurs
        delayMs = baseDelay * Math.pow(2, attempt - 1);
        console.log(
          `‚è≥ Attente de ${delayMs}ms avant la prochaine tentative...`
        );
      }

      await delay(delayMs);
    }
  }

  throw lastError!;
}

/**
 * ü§ñ Fonction principale d'envoi de prompts √† Perplexity avec extraction de sources
 *
 * Cette fonction est le c≈ìur du syst√®me d'interaction avec l'API Perplexity.
 * Elle g√®re l'ensemble du processus depuis l'envoi de la requ√™te jusqu'au
 * formatage des sources, en passant par la gestion d'erreurs compl√®te.
 *
 * Fonctionnalit√©s principales :
 * ‚úÖ Envoi s√©curis√© vers l'API Perplexity avec authentification
 * ‚úÖ Utilisation du mod√®le "sonar" (stable et performant en 2025)
 * ‚úÖ Extraction automatique des sources web depuis la r√©ponse
 * ‚úÖ Formatage intelligent des sources pour diff√©rents usages
 * ‚úÖ Gestion d'erreurs robuste avec messages utilisateur informatifs
 * ‚úÖ Logging d√©taill√© pour faciliter le debugging
 * ‚úÖ NOUVEAU : Syst√®me de retry automatique avec backoff exponentiel
 *
 * Optimisations appliqu√©es :
 * - Mod√®le "sonar" : Mod√®le par d√©faut stable de Perplexity (remplace les anciens mod√®les retir√©s)
 * - Prompt syst√®me concis : √âvite les erreurs 400 li√©es aux prompts trop longs
 * - Param√®tres √©quilibr√©s : Temperature 0.7 pour un bon √©quilibre cr√©ativit√©/pr√©cision
 * - Timeout g√©n√©reux : 30 secondes pour les requ√™tes complexes
 * - Retry intelligent : 3 tentatives avec backoff exponentiel pour la robustesse
 *
 * @param prompt - Le texte/question √† envoyer √† l'IA Perplexity
 * @returns Promise<PerplexityResult> - Objet contenant la r√©ponse et les sources format√©es
 */
export async function fetchAiResponseWithSources(
  prompt: string
): Promise<PerplexityResult> {
  /**
   * üîê V√©rification de s√©curit√© pr√©alable
   *
   * Cette v√©rification √©vite d'envoyer des requ√™tes sans authentification,
   * ce qui √©conomise des appels API inutiles et fournit un message d'erreur clair.
   */
  if (!PERPLEXITY_API_KEY) {
    console.error("‚ùå Tentative d'appel API sans cl√© d'authentification");
    return {
      response:
        "üîê Erreur de configuration : Cl√© API manquante. V√©rifiez votre fichier .env",
      sources: [],
      sourcesFormatted: "Erreur",
      sourcesDisplay: "Erreur",
    };
  }

  try {
    /**
     * üìä Logging informatif pour le d√©veloppement et le debugging
     *
     * Ces logs permettent de suivre le processus d'envoi des requ√™tes
     * et d'identifier d'√©ventuels probl√®mes de performance.
     */
    console.log("‚Üí Traitement du prompt:", prompt.substring(0, 50) + "...");
    console.log("ü§ñ Envoi vers Perplexity avec le mod√®le optimis√© 2025...");

    /**
     * üì° Configuration et envoi de la requ√™te API vers Perplexity avec retry automatique
     */
    const response = await withRetry(
      async () => {
        console.log(`üöÄ Appel API Perplexity...`);

        return await axios.post(
          "https://api.perplexity.ai/chat/completions", // URL officielle de l'API Perplexity
          {
            /**
             * üéØ Configuration du mod√®le et des param√®tres
             */
            model: "sonar", // Mod√®le par d√©faut stable et performant (2025)

            /**
             * üí¨ Structure des messages pour l'IA
             *
             * Le format suit la convention OpenAI/ChatGPT :
             * - "system" : Instructions pour configurer le comportement de l'IA
             * - "user" : Le prompt/question de l'utilisateur
             */
            messages: [
              {
                role: "system",
                /**
                 * üìù Prompt syst√®me optimis√©
                 *
                 * Volontairement concis pour √©viter les erreurs 400 li√©es aux
                 * prompts syst√®me trop longs. Conserve les fonctionnalit√©s essentielles :
                 * - R√©ponses en fran√ßais
                 * - Inclusion des sources web quand possible
                 */
                content:
                  "Tu es un assistant IA fran√ßais. R√©ponds toujours en fran√ßais et inclus les sources web dans tes r√©ponses quand possible.",
              },
              {
                role: "user",
                content: prompt, // Question/demande de l'utilisateur
              },
            ],

            /**
             * ‚öôÔ∏è Param√®tres de g√©n√©ration optimis√©s
             */
            temperature: 0.7, // √âquilibre entre cr√©ativit√© (1.0) et pr√©cision (0.0)
            max_tokens: 1500, // Limite g√©n√©reuse pour des r√©ponses d√©taill√©es
            stream: false, // Mode synchrone pour simplicit√© (pas de streaming)
          },
          {
            /**
             * üîë Configuration des headers et options de requ√™te
             */
            headers: {
              Authorization: `Bearer ${PERPLEXITY_API_KEY}`, // Authentification Bearer
              "Content-Type": "application/json", // Format de donn√©es JSON
            },
            timeout: 30000, // Timeout de 30 secondes pour les requ√™tes complexes
          }
        );
      },
      3,
      1000
    ); // 3 tentatives max, d√©lai de base 1s

    /**
     * üìù Extraction et validation de la r√©ponse de l'API
     *
     * La r√©ponse suit le format standard OpenAI :
     * response.data.choices[0].message.content contient le texte g√©n√©r√©
     */
    const aiResponse = response.data.choices[0]?.message?.content?.trim();

    /**
     * ‚ö†Ô∏è V√©rification de la validit√© de la r√©ponse
     *
     * Gestion du cas o√π l'API retourne une r√©ponse vide ou malform√©e.
     */
    if (!aiResponse) {
      console.error("‚ùå R√©ponse vide de Perplexity");
      return {
        response: "D√©sol√©, je n'ai pas pu g√©n√©rer une r√©ponse.",
        sources: [],
        sourcesFormatted: "Perplexity",
        sourcesDisplay: "Perplexity",
      };
    }

    /**
     * üîç Extraction et formatage intelligent des sources web
     *
     * Processus en trois √©tapes :
     * 1. extractSources() : Trouve toutes les URLs dans la r√©ponse
     * 2. formatSources() : Formate les URLs pour le stockage/liens
     * 3. getDomainName() : Simplifie pour l'affichage utilisateur
     */
    const sources = extractSources(aiResponse);
    const sourcesFormatted = formatSources(sources);
    const sourcesDisplay =
      sources.length > 0
        ? sources.map((url) => getDomainName(url)).join(", ") // "lemonde.fr, franceinfo.fr"
        : "Perplexity"; // Fallback si aucune source d√©tect√©e

    /**
     * ‚úÖ Logging de succ√®s avec informations utiles
     *
     * Ces logs confirment le bon fonctionnement et donnent des m√©triques
     * sur le nombre de sources trouv√©es.
     */
    console.log("‚úÖ R√©ponse Perplexity re√ßue avec succ√®s");
    console.log("üîó Sources extraites:", sources.length);
    if (sources.length > 0) {
      // Log des 3 premi√®res sources pour √©viter le spam dans la console
      console.log("üìã Sources d√©tect√©es:", sources.slice(0, 3));
    }

    /**
     * üéØ Retour de l'objet r√©sultat structur√©
     *
     * Cet objet contient toutes les informations n√©cessaires pour
     * l'affichage et le stockage dans l'application.
     */
    return {
      response: aiResponse, // Texte de r√©ponse principal
      sources, // Array des URLs brutes
      sourcesFormatted, // URLs format√©es pour stockage
      sourcesDisplay, // Noms de domaines pour affichage
    };
  } catch (error: any) {
    /**
     * üõ†Ô∏è Gestion d'erreurs robuste et informative
     *
     * Cette section g√®re tous les types d'erreurs possibles avec des
     * messages utilisateur appropri√©s et un logging d√©taill√© pour le debugging.
     */
    console.error(
      "‚ùå Erreur lors de l'appel Perplexity:",
      error.response?.data || error.message
    );

    /**
     * üîç Analyse sp√©cifique des erreurs HTTP Axios
     *
     * Axios classe automatiquement les erreurs HTTP, permettant une
     * gestion fine selon le type de probl√®me rencontr√©.
     */
    if (axios.isAxiosError(error)) {
      const status = error.response?.status;
      const errorData = error.response?.data;

      /**
       * üîß Logging de diagnostic d√©taill√© (uniquement en d√©veloppement)
       *
       * Ces informations aident au debugging sans encombrer les logs
       * en production.
       */
      if (process.env.NODE_ENV === "development") {
        console.log("üìä Diagnostic d√©taill√©:");
        console.log("   Statut HTTP:", status);
        console.log("   Donn√©es d'erreur:", JSON.stringify(errorData, null, 2));
      }

      /**
       * üìã Gestion sp√©cifique par code d'erreur HTTP
       *
       * Chaque type d'erreur a son message personnalis√© pour guider
       * l'utilisateur vers la solution appropri√©e.
       */

      // Erreur 400 : Requ√™te malform√©e
      if (status === 400) {
        return {
          response:
            "üîß Erreur de requ√™te (400). Le format de la demande n'est pas valide. Veuillez r√©essayer avec un prompt diff√©rent.",
          sources: [],
          sourcesFormatted: "Erreur de format",
          sourcesDisplay: "Erreur de format",
        };
      }

      // Erreur 401 : Authentification √©chou√©e
      if (status === 401) {
        return {
          response:
            "üîê Probl√®me d'authentification. V√©rifiez votre cl√© API Perplexity et vos cr√©dits disponibles.",
          sources: [],
          sourcesFormatted: "Erreur d'authentification",
          sourcesDisplay: "Erreur d'authentification",
        };
      }

      // Erreur 403 : Acc√®s interdit
      if (status === 403) {
        return {
          response:
            "üö´ Acc√®s refus√©. Votre plan Perplexity ne permet peut-√™tre pas d'utiliser cette fonctionnalit√©.",
          sources: [],
          sourcesFormatted: "Acc√®s refus√©",
          sourcesDisplay: "Acc√®s refus√©",
        };
      }

      // Erreur 429 : Trop de requ√™tes
      if (status === 429) {
        return {
          response: "üö¶ Limite de taux Perplexity atteinte. L'application va automatiquement r√©essayer avec des d√©lais plus longs. Patientez un moment... (Ceci peut prendre 1-2 minutes)",
          sources: [],
          sourcesFormatted: "Rate limit",
          sourcesDisplay: "Rate limit"
        };
      }

      // Erreur de timeout r√©seau
      if (error.code === "ECONNABORTED") {
        return {
          response:
            "‚è±Ô∏è D√©lai d'attente d√©pass√©. V√©rifiez votre connexion internet et r√©essayez.",
          sources: [],
          sourcesFormatted: "Timeout",
          sourcesDisplay: "Timeout",
        };
      }

      // Erreurs serveur (5xx)
      if (status && status >= 500) {
        return {
          response:
            "üîß Probl√®me temporaire du serveur Perplexity. R√©essayez dans quelques minutes.",
          sources: [],
          sourcesFormatted: "Erreur serveur",
          sourcesDisplay: "Erreur serveur",
        };
      }
    }

    /**
     * üîÑ Erreur g√©n√©rique pour les cas non couverts
     *
     * Cette r√©ponse catch-all g√®re les erreurs inattendues tout en
     * fournissant des instructions utiles √† l'utilisateur.
     */
    return {
      response:
        "‚ùå Une erreur inattendue s'est produite. V√©rifiez votre connexion et r√©essayez dans quelques instants.",
      sources: [],
      sourcesFormatted: "Erreur inconnue",
      sourcesDisplay: "Erreur inconnue",
    };
  }
}

/**
 * üéØ Fonction simplifi√©e pour compatibilit√© avec l'ancien code
 *
 * Cette fonction wraps la fonction principale pour maintenir la compatibilit√©
 * avec le code existant qui n'a besoin que de la r√©ponse textuelle.
 *
 * Utilis√©e dans les contextes o√π les m√©tadonn√©es de sources ne sont pas
 * n√©cessaires, par exemple pour des tests rapides ou des int√©grations simples.
 *
 * @param prompt - Question √† envoyer √† l'IA
 * @returns Promise<string> - R√©ponse textuelle uniquement
 */
export async function fetchAiResponse(prompt: string): Promise<string> {
  const result = await fetchAiResponseWithSources(prompt);
  return result.response;
}

/**
 * üìö DOCUMENTATION COMPL√àTE D'UTILISATION AVEC SYST√àME DE RETRY
 *
 * ===== R√âSUM√â DES FONCTIONNALIT√âS =====
 *
 * Cette impl√©mentation finale offre :
 *
 * ‚úÖ PERFORMANCE :
 *    - Mod√®le "sonar" stable et rapide (2025)
 *    - Param√®tres optimis√©s pour √©quilibrer rapidit√© et qualit√©
 *    - Timeout g√©n√©reux pour les requ√™tes complexes
 *
 * ‚úÖ FIABILIT√â RENFORC√âE :
 *    - Gestion d'erreurs compl√®te avec messages utilisateur clairs
 *    - Fallbacks automatiques pour tous les cas d'√©chec
 *    - Validation robuste des r√©ponses API
 *    - ‚úÖ NOUVEAU : Syst√®me de retry automatique avec backoff exponentiel
 *    - ‚úÖ NOUVEAU : Pas de retry sur erreurs d√©finitives (401, 403)
 *    - ‚úÖ NOUVEAU : D√©lais intelligents entre tentatives (1s, 2s, 4s)
 *
 * ‚úÖ S√âCURIT√â :
 *    - Variables d'environnement prot√©g√©es
 *    - V√©rifications d'authentification pr√©alables
 *    - Pas d'exposition de donn√©es sensibles
 *
 * ‚úÖ MAINTENABILIT√â :
 *    - Code enti√®rement document√© en fran√ßais
 *    - Architecture modulaire avec fonctions s√©par√©es
 *    - Logging d√©taill√© pour faciliter le debugging
 *
 * ‚úÖ FONCTIONNALIT√âS AVANC√âES :
 *    - Extraction automatique des sources web
 *    - Formatage intelligent pour diff√©rents usages
 *    - Support complet des URLs modernes
 *    - ‚úÖ NOUVEAU : Robustesse face aux connexions instables
 *
 * ===== EXEMPLES D'UTILISATION =====
 *
 * 1. UTILISATION COMPL√àTE AVEC SOURCES ET RETRY :
 *
 * ```typescript
 * const result = await fetchAiResponseWithSources("R√©sum√© esport du jour");
 * // Retry automatique en cas d'√©chec r√©seau temporaire
 *
 * console.log("R√©ponse:", result.response);
 * console.log("Sources lisibles:", result.sourcesDisplay); // "lemonde.fr, jeuxvideo.com"
 * console.log("URLs compl√®tes:", result.sourcesFormatted); // Pour liens cliquables
 * ```
 *
 * 2. UTILISATION DANS LE CONTEXT PROMPT :
 *
 * ```typescript
 * const result = await fetchAiResponseWithSources(question);
 * // Syst√®me de retry transparent pour l'utilisateur
 *
 * const newPrompt: Prompt = {
 *   id: Date.now().toString(),
 *   question,
 *   response: result.response,
 *   source: result.sourcesFormatted, // URLs compl√®tes pour liens cliquables
 *   updatedAt: now,
 *   scheduled: isScheduled ? scheduleConfig : undefined
 * };
 * ```
 *
 * 3. UTILISATION SIMPLE (COMPATIBILIT√â) :
 *
 * ```typescript
 * const response = await fetchAiResponse("Question simple");
 * // M√™me retry automatique que la version compl√®te
 * console.log(response); // Texte de r√©ponse uniquement
 * ```
 *
 * ===== STRAT√âGIE DE RETRY =====
 *
 * üîÑ TENTATIVES AUTOMATIQUES :
 *    - Tentative 1 : imm√©diate
 *    - Tentative 2 : apr√®s 1 seconde
 *    - Tentative 3 : apr√®s 2 secondes
 *    - Tentative 4 : apr√®s 4 secondes (si activ√©e)
 *
 * üö´ PAS DE RETRY POUR :
 *    - Erreurs 401 (authentification) - d√©finitive
 *    - Erreurs 403 (permissions) - d√©finitive
 *    - Autres erreurs : retry automatique
 *
 * üìä LOGGING INTELLIGENT :
 *    - Affichage du num√©ro de tentative
 *    - Message de succ√®s apr√®s retry
 *    - D√©lai avant prochaine tentative
 *
 * ===== CONSID√âRATIONS POUR LA PRODUCTION =====
 *
 * üîß MONITORING :
 *    - Surveillez les logs de retry pour identifier les probl√®mes r√©seau
 *    - Trackez les taux de succ√®s apr√®s retry
 *    - Mesurez l'impact des d√©lais sur l'UX
 *
 * üí∞ OPTIMISATION DES CO√õTS :
 *    - Le retry √©vite les √©checs inutiles dus au r√©seau
 *    - Am√©liore le taux de succ√®s sans co√ªt suppl√©mentaire
 *    - R√©duit la frustration utilisateur
 *
 * üöÄ ROBUSTESSE PRODUCTION :
 *    - Gestion transparente des connexions instables
 *    - Exp√©rience utilisateur fluide m√™me avec mauvais r√©seau
 *    - R√©silience face aux pics de charge du serveur
 *
 * Cette version avec retry est maintenant **PR√äTE POUR LA PRODUCTION**
 * et garantit une exp√©rience utilisateur robuste m√™me dans des conditions
 * r√©seau difficiles ou lors de surcharges temporaires du serveur Perplexity.
 */
